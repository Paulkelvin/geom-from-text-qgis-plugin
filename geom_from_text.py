# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeomFromText
                                 A QGIS plugin
 This plugin creates new cadastre parcels and beacons
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Sivan Design D.S. Ltd.
        email                : guy.magen@sivandesign.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QThread
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import (QgsVectorLayer,
                       QgsMapLayer,
                       QgsFeature,
                       QgsDataSourceUri,
                       QgsGeometry,
                       QgsPointXY,
                       QgsProject,
                       QgsCoordinateTransform,
                       QgsCoordinateReferenceSystem,
                       Qgis,
                       QgsVectorLayerUtils,
                       QgsFillSymbol,
                       QgsFeatureRequest,
                       QgsMessageLog)
from qgis import processing
import configparser
from PyQt5.QtCore import QDate
import sys
import subprocess
from qgis.PyQt.QtCore import QThread
from .processing_worker import GeomFromTextWorker

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .geom_from_text_dialog import GeomFromTextDialog, GeomFromTextReview
import os.path

class GeomFromTextOptimized:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeomFromText_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Geom from Text')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeomFromText', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geom_from_text/icon_new.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Add parcels from CSV'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Geom from Text'),
                action)
            self.iface.removeToolBarIcon(action)

    def on_progress_message(self, message):
        """Handle progress messages from the worker"""
        self.iface.messageBar().pushMessage('Processing', message, level=Qgis.Info, duration=3)
        # Also print to console for debugging
        print(f"PROGRESS: {message}")

    def run(self):
        """Run method that performs all the real work"""

        if self.first_start == True:
            self.first_start = False
            self.dlg = GeomFromTextDialog()
            self.dlgRev = GeomFromTextReview()

        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            # --- Get user input ---
            csv_path = self.dlg.qfw.filePath()
            epsg = self.dlg.cmb.itemData(self.dlg.cmb.currentIndex())
            app_num = self.dlg.ldt.text().strip()

            # --- Disable OK button and set wait cursor ---
            ok_button = self.dlg.button_box.button(self.dlg.button_box.Ok)
            if ok_button:
                ok_button.setEnabled(False)
            self.iface.mainWindow().setCursor(Qt.WaitCursor)

            # --- Start worker in a QThread ---
            self.thread = QThread()
            self.worker = GeomFromTextWorker(csv_path, epsg, app_num, self.plugin_dir)
            self.worker.moveToThread(self.thread)
            self.thread.started.connect(self.worker.run)
            self.worker.finished.connect(self.on_worker_finished)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)
            
            # Connect progress signal to show messages
            self.worker.progress.connect(self.on_progress_message)
            
            self.thread.start()
            
            # Test progress message
            self.iface.messageBar().pushMessage('Info', 'Starting CSV processing...', level=Qgis.Info, duration=3)

    def on_worker_finished(self, result):
        # --- Restore UI state ---
        if hasattr(self, 'dlg') and self.dlg:
            ok_button = self.dlg.button_box.button(self.dlg.button_box.Ok)
            if ok_button:
                ok_button.setEnabled(True)
        self.iface.mainWindow().setCursor(Qt.ArrowCursor)

        # --- Handle result ---
        if result.get('success'):
            # Review dialog and feature approval workflow
            parcels_feats = result['parcels_feats']
            beacons_feats = result['beacons_feats']
            roads_feats = result['roads_feats']
            beacons_dict = result['beacons_dict']
            roads_dict = result['roads_dict']
            lga = result['lga']
            blocks = result['blocks']
            parcels = result['parcels']
            beacons = result['beacons']
            roads = result['roads']
            parcel_lkp = result['parcel_lkp']
            lga_num = result['lga_num']
            block_num = result['block_num']
            parcel_num = result['parcel_num']
            data_source = result['data_source']
            status = result['status']
            app_num = result['app_num']
            plugin_dir = result['plugin_dir']
            parcel_id_list = result['parcel_id_list']
            
            # OPTIMIZED: Batch review - create single memory layer for all parcels
            self.iface.messageBar().pushMessage('Info', 'Creating review layer...', level=Qgis.Info, duration=2)
            
            # OPTIMIZED: Disable canvas refreshes during layer creation
            canvas = self.iface.mapCanvas()
            canvas.setRenderFlag(False)
            
            # Get the fields from the original parcels layer
            fields = parcels.fields()
            crs = parcels.crs().authid() if hasattr(parcels, 'crs') else 'EPSG:26331'
            review_lyr = QgsVectorLayer(f'Polygon?crs={crs}', 'New Parcels for Review', 'memory')
            review_lyr.dataProvider().addAttributes(list(fields))
            review_lyr.updateFields()
            
            # BATCH ADD: Add all parcels at once to the review layer
            review_lyr.dataProvider().addFeatures(parcels_feats)
            
            # Set styling for review layer
            review_lyr.setFlags(QgsMapLayer.LayerFlag(8))
            symbol = QgsFillSymbol.createSimple({
                'outline_style': 'solid', 
                'outline_width': '0.66', 
                'outline_color': 'yellow', 
                'color': '0,0,0,0'
            })
            review_lyr.renderer().setSymbol(symbol)
            
            # Add to map and zoom
            root = QgsProject.instance().layerTreeRoot()
            root.insertLayer(0, review_lyr)
            
            # OPTIMIZED: Re-enable canvas and refresh once
            canvas.setRenderFlag(True)
            canvas.setExtent(review_lyr.extent().scaled(1.4))
            canvas.refresh()
            
            # Show review dialog
            self.dlgRev.setWindowFlags(Qt.WindowStaysOnTopHint)
            self.dlgRev.show()
            result_dialog = self.dlgRev.exec_()
            
            # Remove review layer
            root.removeLayer(review_lyr)
            canvas.refresh()
            
            if result_dialog:
                # User approved - proceed with adding to main layers
                self.iface.messageBar().pushMessage('Info', 'Adding parcels to database...', level=Qgis.Info, duration=2)
                
                # Add parcels to database first
                new_parcels = parcels.dataProvider().addFeatures(parcels_feats)[1]
                new_ids = [feat.id() for feat in new_parcels]
                
                # OPTIMIZED: Log the feature IDs for debugging
                self.iface.messageBar().pushMessage('Info', f'Added {len(new_parcels)} parcels with IDs: {new_ids}', level=Qgis.Info, duration=3)
                
                # OPTIMIZED: Batch parcel numbering operations
                self.iface.messageBar().pushMessage('Info', 'Assigning parcel numbers...', level=Qgis.Info, duration=2)
                
                parcels.select(new_ids)
                parcels.startEditing()
                parcels_fields = parcels.fields()
                
                # Collect all LGA/block combinations to process in batch
                lga_block_combinations = set()
                for feat in parcels.selectedFeatures():
                    lga_block_combinations.add((feat['lga_num'], feat['block_num']))
                
                # Batch query and update parcel lookup table
                parcel_lkp.startEditing()
                
                # Process each unique LGA/block combination
                for lga_num, block_num in lga_block_combinations:
                    expression = f'("block_num" = {block_num}) AND ("lga_num" = {lga_num})'
                    parcel_lkp.selectByExpression(expression)
                    
                    if parcel_lkp.selectedFeatures():
                        # Update existing counter
                        counter = parcel_lkp.selectedFeatures()[0]
                        parcel_count = counter['parcel_count'] + 1
                        parcel_lkp.removeSelection()
                        counter['parcel_count'] = parcel_count
                        parcel_lkp.updateFeature(counter)
                    else:
                        # Create new counter
                        parcel_count = 1
                        fields = parcel_lkp.fields()
                        counter = QgsFeature(fields)
                        counter.setAttribute(fields.indexFromName('lga_num'), lga_num)
                        counter.setAttribute(fields.indexFromName('block_num'), block_num)
                        counter.setAttribute(fields.indexFromName('parcel_count'), parcel_count)
                        parcel_lkp.addFeature(counter)
                
                # Single commit for all parcel lookup changes
                parcel_lkp.commitChanges()
                
                # OPTIMIZED: Preserve parcel numbers from worker, don't overwrite them
                # The parcel numbers were already set correctly in processing_worker.py
                # We don't need to query the lookup table for parcel numbers
                
                # Get the parcel numbers that were already set in the worker
                parcel_nums = []
                for feat in parcels.selectedFeatures():
                    parcel_num = feat['parcel_num']  # Use the value already set in worker
                    parcel_nums.append(parcel_num)
                    self.iface.messageBar().pushMessage('Info', f'Preserved parcel_num={parcel_num} for feature {feat.id()}', level=Qgis.Info, duration=2)
                
                # Single commit for all parcel changes (no changes needed, just commit)
                parcels.commitChanges()
                
                # Get the updated values
                lga_nums = QgsVectorLayerUtils.getValues(parcels, 'lga_num', selectedOnly=True)[0]
                block_nums = QgsVectorLayerUtils.getValues(parcels, 'block_num', selectedOnly=True)[0]
                parcels.removeSelection()
                
                parcel_ids = list(beacons_dict.keys())
                upi_dict = dict(zip(parcel_ids, zip(lga_nums, block_nums, parcel_nums)))
                
                # OPTIMIZED: Add defensive logging for upi_dict
                self.iface.messageBar().pushMessage('Info', f'UPI dict contains {len(upi_dict)} entries', level=Qgis.Info, duration=2)
                
                # Collect all roads and beacons for batch processing
                all_roads = []
                all_beacons = []
                
                for k in roads_dict:
                    # OPTIMIZED: Defensive coding for missing keys
                    if k in upi_dict:
                        lga_val = upi_dict[k][0]
                        block_val = upi_dict[k][1]
                        parcel_val = upi_dict[k][2]
                    else:
                        # Set default values for missing keys
                        self.iface.messageBar().pushMessage('Warning', f'Missing UPI data for parcel {k}, using defaults', level=Qgis.Warning, duration=3)
                        lga_val = 999
                        block_val = 999
                        parcel_val = 999
                    
                    # Process all features for this parcel
                    for feat in roads_dict[k]:
                        feat['lga_num'] = lga_val
                        feat['block_num'] = block_val
                        feat['parcel_num'] = parcel_val
                        all_roads.append(feat)
                
                for k in beacons_dict:
                    # OPTIMIZED: Defensive coding for missing keys
                    if k in upi_dict:
                        lga_val = upi_dict[k][0]
                        block_val = upi_dict[k][1]
                        parcel_val = upi_dict[k][2]
                    else:
                        # Set default values for missing keys
                        self.iface.messageBar().pushMessage('Warning', f'Missing UPI data for parcel {k}, using defaults', level=Qgis.Warning, duration=3)
                        lga_val = 999
                        block_val = 999
                        parcel_val = 999
                    
                    # Process all features for this parcel
                    for feat in beacons_dict[k]:
                        feat['lga_num'] = lga_val
                        feat['block_num'] = block_val
                        feat['parcel_num'] = parcel_val
                        all_beacons.append(feat)
                
                # Batch add all roads and beacons at once
                roads.dataProvider().addFeatures(all_roads)
                beacons.dataProvider().addFeatures(all_beacons)
                
                # OPTIMIZED: Use correct feature IDs for zooming
                if new_ids:
                    try:
                        canvas.zoomToFeatureIds(parcels, new_ids)
                        self.iface.messageBar().pushMessage('Info', f'Zoomed to feature IDs: {new_ids}', level=Qgis.Info, duration=2)
                    except Exception as e:
                        self.iface.messageBar().pushMessage('Warning', f'Zoom failed: {str(e)}', level=Qgis.Warning, duration=3)
                else:
                    self.iface.messageBar().pushMessage('Warning', 'No new parcel IDs to zoom to', level=Qgis.Warning, duration=3)
                
                req = QgsFeatureRequest().setFilterExpression(f'"lga_num" = {lga_num}')
                lga_name = None
                for feat in lga.getFeatures(req):
                    lga_name = feat['lga_name']
                send_request_path = os.path.join(plugin_dir, 'send_request.py')
                qgis_base_dir = os.path.dirname(sys.executable)
                qgis_python_path = os.path.join(qgis_base_dir, 'python.exe')
                send_request_cmd = [qgis_python_path, send_request_path, app_num, lga_name, str(block_num), str(parcel_num)]
                try:
                    import subprocess
                    subprocess.run(send_request_cmd, check=True)
                except Exception as e:
                    QMessageBox.warning(self.iface.mainWindow(), 'Warning', f'Failed to send Application No. {app_num}\nUnexpected error occurred:\n{str(e)}')
                msg = 'A new parcel has been added to the layer' if len(new_parcels) == 1 else f'{len(new_parcels)} new parcels have been added to the layer'
                self.iface.messageBar().pushMessage('Done', msg, level=Qgis.Success, duration=3)
            else:
                # User disapproved
                QMessageBox.critical(self.iface.mainWindow(), 'Error', 'Parcels disapproved by user')
                self.iface.messageBar().pushMessage('Error', 'Failed to add new parcels', level=Qgis.Critical, duration=3)
        else:
            QMessageBox.critical(self.iface.mainWindow(), 'Error', result.get('error', 'Unknown error'))