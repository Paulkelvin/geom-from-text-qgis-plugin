# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeomFromTextDialog
                                 A QGIS plugin
 This plugin creates new cadastre parcels and beacons
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-03-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Sivan Design Inc
        email                : guy.magen@sivandesign.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# load 1st ui file for the csv input
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'geom_from_text_dialog_base.ui'))

class GeomFromTextDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GeomFromTextDialog, self).__init__(parent)
        self.setupUi(self)

        # assign epsg codes to the comboBox items 
        self.cmb.setItemData(0, 26331) # Minna / UTM zone 31N
        self.cmb.setItemData(1, 26391) # NNO
        self.cmb.setItemData(2, 32631) # WGS 84 / UTM zone 31N

        # disable OK button initially
        self.ok_button = self.button_box.button(self.button_box.Ok)
        self.ok_button.setEnabled(False)
        # connect QLineEdit validation function
        self.ldt.textChanged.connect(self.update_validation)

    def update_validation(self):
        """Enable OK button when input is provided and highlight field if empty."""
        text_filled = bool(self.ldt.text().strip())
        self.ok_button.setEnabled(text_filled)

        # highlight empty field
        self.ldt.setStyleSheet("" if text_filled else "border: 2px solid red;")

# load 2nd ui file for the parcel review dialog
FORM_CLASS1, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'geom_from_text_dialog_review.ui'))

class GeomFromTextReview(QtWidgets.QDialog, FORM_CLASS1):
    def __init__(self, parent=None):
        """Constructor."""
        super(GeomFromTextReview, self).__init__(parent)
        self.setupUi(self)
        
        # Connect the zoom button to zoom functionality
        self.btnZoom.clicked.connect(self.zoom_to_parcels)
        self.review_layer = None  # Will be set by the main plugin
        
    def set_review_layer(self, layer):
        """Set the review layer to zoom to."""
        self.review_layer = layer
        
    def zoom_to_parcels(self):
        """Zoom to the parcels in the review layer using robust querying."""
        try:
            from qgis.core import QgsProject, QgsFeatureRequest
            from qgis import Qgis
            
            # Get the main parcels layer from the project
            parcels_layer = None
            for layer in QgsProject.instance().mapLayers().values():
                if layer.name() == 'parcels' and layer.geometryType() == 2:  # Polygon layer
                    parcels_layer = layer
                    break
            
            if not parcels_layer:
                # Fallback: try to find any polygon layer that might be parcels
                for layer in QgsProject.instance().mapLayers().values():
                    if layer.geometryType() == 2 and 'parcel' in layer.name().lower():
                        parcels_layer = layer
                        break
            
            if not parcels_layer:
                print("No parcels layer found for zooming")
                return
            
            # Get the canvas
            canvas = self.parent().iface.mapCanvas() if hasattr(self.parent(), 'iface') else None
            if not canvas:
                print("Canvas not available for zooming")
                return
            
            # Query for all features in the review layer to get their parcel numbers
            if self.review_layer and self.review_layer.isValid():
                parcel_nums = []
                for feature in self.review_layer.getFeatures():
                    parcel_num = feature['parcel_num']
                    if parcel_num:
                        parcel_nums.append(parcel_num)
                
                if parcel_nums:
                    # Query the main parcels layer for these parcel numbers
                    all_found_ids = []
                    for parcel_num in parcel_nums:
                        expr = f'"parcel_num" = {parcel_num}'
                        request = QgsFeatureRequest().setFilterExpression(expr)
                        found_ids = [f.id() for f in parcels_layer.getFeatures(request)]
                        all_found_ids.extend(found_ids)
                    
                    if all_found_ids:
                        # Select and zoom to the found features
                        parcels_layer.selectByIds(all_found_ids)
                        canvas.zoomToFeatureIds(parcels_layer, all_found_ids)
                        self.parent().iface.messageBar().pushMessage('Info', f'Zoomed to {len(all_found_ids)} parcels with parcel_nums: {parcel_nums}', level=Qgis.Info, duration=3)
                    else:
                        # Fallback: zoom to review layer extent
                        canvas.setExtent(self.review_layer.extent().scaled(1.2))
                        canvas.refresh()
                        self.parent().iface.messageBar().pushMessage('Info', 'Zoomed to review layer extent (fallback)', level=Qgis.Info, duration=2)
                else:
                    # No parcel numbers found, zoom to review layer extent
                    canvas.setExtent(self.review_layer.extent().scaled(1.2))
                    canvas.refresh()
                    self.parent().iface.messageBar().pushMessage('Info', 'Zoomed to review layer extent', level=Qgis.Info, duration=2)
            else:
                print("Review layer not available for zooming")
                
        except Exception as e:
            print(f"Error zooming to parcels: {str(e)}")
            # Fallback: try to zoom to review layer if available
            if self.review_layer and self.review_layer.isValid():
                try:
                    canvas = self.parent().iface.mapCanvas() if hasattr(self.parent(), 'iface') else None
                    if canvas:
                        canvas.setExtent(self.review_layer.extent().scaled(1.2))
                        canvas.refresh()
                        self.parent().iface.messageBar().pushMessage('Info', 'Zoomed to review layer (error fallback)', level=Qgis.Info, duration=2)
                except:
                    pass
